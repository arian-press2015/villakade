generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(20)
  fa_title           String               @db.VarChar(100)
  residence_category residence_category[]
}

model city {
  id                    Int         @id @default(autoincrement())
  province_id           Int
  name                  String      @db.VarChar(20)
  fa_name               String      @db.VarChar(20)
  total_residence_count Int         @default(0)
  province              province    @relation(fields: [province_id], references: [id], map: "city_FK")
  residence             residence[]

  @@unique([province_id, fa_name], map: "city_fa_name_province_UN")
  @@unique([province_id, name], map: "city_name_province_UN")
}

model contact_us {
  id          Int    @id @default(autoincrement())
  email       String @db.VarChar(50)
  phone       String @db.VarChar(13)
  full_name   String @db.VarChar(50)
  description String @db.VarChar(100)
}

model faq {
  id       Int          @id @default(autoincrement())
  faq_type faq_faq_type
  question String       @db.VarChar(100)
  answer   String       @db.VarChar(100)
}

model host {
  id         Int         @id @default(autoincrement())
  first_name String      @db.VarChar(20)
  last_name  String      @db.VarChar(20)
  phone      String      @unique(map: "host_phone_UN") @db.VarChar(13)
  vip        Boolean     @default(false)
  active     Boolean     @default(false)
  residence  residence[]
}

model province {
  id      Int    @id @default(autoincrement())
  name    String @unique(map: "province_name_UN") @db.VarChar(20)
  fa_name String @unique(map: "province_fa_name_UN") @map("fa-name") @db.VarChar(20)
  city    city[]
}

model residence {
  id                  Int                  @id @default(autoincrement())
  host_id             Int
  title               String               @db.VarChar(100)
  type_id             Int
  location            String               @db.VarChar(100)
  price               Int
  active              Boolean              @default(false)
  city_id             Int
  host                host                 @relation(fields: [host_id], references: [id], map: "residence_FK")
  type                type                 @relation(fields: [type_id], references: [id], map: "residence_FK_1")
  city                city                 @relation(fields: [city_id], references: [id], map: "residence_FK_2")
  residence_attribute residence_attribute?
  residence_category  residence_category[]
  residence_image     residence_image?
  residence_rule      residence_rule?

  @@index([host_id], map: "residence_FK")
  @@index([type_id], map: "residence_FK_1")
  @@index([city_id], map: "residence_FK_2")
}

model residence_attribute {
  residence_id        Int       @id
  residence_size      Int
  residence_yard_size Int
  bedroom_count       Int
  capacity            Int
  in_time             DateTime  @db.Time(0)
  out_time            DateTime  @db.Time(0)
  pet                 Boolean   @default(false)
  instant_delivery    Boolean   @default(false)
  dishes              Boolean   @default(false)
  dining_table        Boolean   @default(false)
  microwave           Boolean   @default(false)
  fridge              Boolean   @default(false)
  water               Boolean   @default(false)
  electricity         Boolean   @default(false)
  gas                 Boolean   @default(false)
  tv                  Boolean   @default(false)
  elevator            Boolean   @default(false)
  local_wc            Boolean   @default(false)
  wc                  Boolean   @default(false)
  pool_table          Boolean   @default(false)
  ping_pong_table     Boolean   @default(false)
  pool                Boolean   @default(false)
  vip                 Boolean   @default(false)
  residence           residence @relation(fields: [residence_id], references: [id], map: "residence_attribute_FK")
}

model residence_category {
  residence_id Int
  category_id  Int
  residence    residence @relation(fields: [residence_id], references: [id], map: "residence_category_FK")
  category     category  @relation(fields: [category_id], references: [id], map: "residence_category_FK_1")

  @@id([residence_id, category_id])
  @@index([category_id], map: "residence_category_FK_1")
}

model residence_image {
  residence_id Int       @id
  url          String    @db.VarChar(100)
  width        Int
  height       Int
  residence    residence @relation(fields: [residence_id], references: [id], map: "residence_image_FK")
}

model residence_rule {
  residence_id Int       @id
  rule_body    String    @db.VarChar(100)
  residence    residence @relation(fields: [residence_id], references: [id], map: "residence_rule_FK")
}

model support {
  id        Int     @id @default(autoincrement())
  full_name String  @db.VarChar(100)
  phone     String  @db.VarChar(13)
  active    Boolean
}

model type {
  id        Int         @id @default(autoincrement())
  title     String      @unique(map: "type_title_UN") @db.VarChar(20)
  fa_title  String      @unique(map: "type_title_fa_UN") @db.VarChar(20)
  residence residence[]
}

model customer {
  id         Int     @id @default(autoincrement())
  first_name String  @default("کاربر") @db.VarChar(20)
  last_name  String  @default("گرامی") @db.VarChar(30)
  phone      String  @unique(map: "customer_UN") @db.VarChar(13)
  active     Boolean @default(false)
}

model owner {
  id         Int    @id @default(autoincrement())
  first_name String @db.VarChar(20)
  last_name  String @db.VarChar(30)
  phone      String @unique(map: "owner_UN") @db.VarChar(13)
  username   String @db.VarChar(20)
  password   String @db.VarChar(100)
  role_id    Int
  role       role   @relation(fields: [role_id], references: [id], map: "owner_FK")

  @@index([role_id], map: "owner_FK")
}

model permission {
  id              Int               @id @default(autoincrement())
  title           String            @unique(map: "permission_UN") @db.VarChar(30)
  fa_title        String            @unique(map: "permission_UN1") @db.VarChar(30)
  role_permission role_permission[]
}

model role {
  id              Int               @id @default(autoincrement())
  title           String            @unique(map: "role_UN") @db.VarChar(30)
  fa_title        String            @unique(map: "role_UN1") @db.VarChar(30)
  owner           owner[]
  role_permission role_permission[]
}

model role_permission {
  role_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], map: "role_permission_FK")
  role          role       @relation(fields: [role_id], references: [id], map: "role_permission_FK_1")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "role_permission_FK")
}

enum faq_faq_type {
  residence
  quest
  general
}
