generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model category {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(20)
  fa_title           String               @db.VarChar(100)
  category_image     category_image?
  residence_category residence_category[]
}

model city {
  id                    Int         @id @default(autoincrement())
  province_id           Int
  name                  String      @db.VarChar(20)
  fa_name               String      @db.VarChar(20)
  total_residence_count Int         @default(0)
  province              province    @relation(fields: [province_id], references: [id], map: "city_FK")
  residence             residence[]

  @@unique([province_id, fa_name], map: "city_fa_name_province_UN")
  @@unique([province_id, name], map: "city_name_province_UN")
}

model contact_us {
  id          Int    @id @default(autoincrement())
  email       String @db.VarChar(50)
  phone       String @db.VarChar(13)
  full_name   String @db.VarChar(50)
  description String @db.VarChar(100)
}

model faq {
  id       Int          @id @default(autoincrement())
  faq_type faq_faq_type
  question String       @db.VarChar(100)
  answer   String       @db.VarChar(100)
}

model host {
  id         Int         @id @default(autoincrement())
  first_name String      @db.VarChar(20)
  last_name  String      @db.VarChar(20)
  phone      String      @unique(map: "host_phone_UN") @db.VarChar(13)
  vip        Boolean     @default(false)
  active     Boolean     @default(false)
  residence  residence[]
}

model province {
  id      Int    @id @default(autoincrement())
  name    String @unique(map: "province_name_UN") @db.VarChar(20)
  fa_name String @unique(map: "province_fa_name_UN") @map("fa-name") @db.VarChar(20)
  city    city[]
}

model residence {
  id                                   Int                                   @id @default(autoincrement())
  host_id                              Int
  title                                String                                @db.VarChar(100)
  type_id                              Int
  location                             String                                @db.VarChar(100)
  active                               Boolean                               @default(false)
  city_id                              Int
  normal_capacity                      Int
  max_capacity                         Int
  about                                String                                @db.VarChar(200)
  host                                 host                                  @relation(fields: [host_id], references: [id], map: "residence_FK")
  type                                 type                                  @relation(fields: [type_id], references: [id], map: "residence_FK_1")
  city                                 city                                  @relation(fields: [city_id], references: [id], map: "residence_FK_2")
  residence_air_conditioning_attribute residence_air_conditioning_attribute?
  residence_category                   residence_category[]
  residence_cooking_attribute          residence_cooking_attribute?
  residence_entertainment_attribute    residence_entertainment_attribute?
  residence_facility_attribute         residence_facility_attribute?
  residence_image                      residence_image[]
  residence_parking_attribute          residence_parking_attribute?
  residence_price                      residence_price?
  residence_room_attribute             residence_room_attribute?
  residence_rule                       residence_rule?
  residence_serve_attribute            residence_serve_attribute?
  residence_wc_bathroom                residence_wc_bathroom?

  @@index([host_id], map: "residence_FK")
  @@index([type_id], map: "residence_FK_1")
  @@index([city_id], map: "residence_FK_2")
}

model residence_category {
  residence_id Int
  category_id  Int
  residence    residence @relation(fields: [residence_id], references: [id], map: "residence_category_FK")
  category     category  @relation(fields: [category_id], references: [id], map: "residence_category_FK_1")

  @@id([residence_id, category_id])
  @@index([category_id], map: "residence_category_FK_1")
}

model residence_image {
  residence_id Int
  url          String    @db.VarChar(100)
  width        Int
  height       Int
  id           Int       @id @default(autoincrement())
  residence    residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_image_FK")

  @@index([residence_id], map: "residence_image_FK")
}

model residence_rule {
  residence_id       Int                       @id
  rule_body          String                    @db.VarChar(100)
  in_time            DateTime                  @db.Time(0)
  out_time           DateTime                  @db.Time(0)
  required_documents String?                   @db.VarChar(100)
  pet_status         residence_rule_pet_status
  ceremonies         residence_rule_ceremonies
  residence          residence                 @relation(fields: [residence_id], references: [id], map: "residence_rule_FK")
}

model support {
  id        Int     @id @default(autoincrement())
  full_name String  @db.VarChar(100)
  phone     String  @db.VarChar(13)
  active    Boolean
}

model type {
  id        Int         @id @default(autoincrement())
  title     String      @unique(map: "type_title_UN") @db.VarChar(20)
  fa_title  String      @unique(map: "type_title_fa_UN") @db.VarChar(20)
  residence residence[]
}

model customer {
  id         Int     @id @default(autoincrement())
  first_name String  @default("کاربر") @db.VarChar(20)
  last_name  String  @default("گرامی") @db.VarChar(30)
  phone      String  @unique(map: "customer_UN") @db.VarChar(13)
  active     Boolean @default(false)
}

model owner {
  id         Int    @id @default(autoincrement())
  first_name String @db.VarChar(20)
  last_name  String @db.VarChar(30)
  phone      String @unique(map: "owner_UN") @db.VarChar(13)
  username   String @db.VarChar(20)
  password   String @db.VarChar(100)
  role_id    Int
  role       role   @relation(fields: [role_id], references: [id], map: "owner_FK")

  @@index([role_id], map: "owner_FK")
}

model permission {
  id              Int               @id @default(autoincrement())
  title           String            @unique(map: "permission_UN") @db.VarChar(30)
  fa_title        String            @unique(map: "permission_UN1") @db.VarChar(30)
  role_permission role_permission[]
}

model role {
  id              Int               @id @default(autoincrement())
  title           String            @unique(map: "role_UN") @db.VarChar(30)
  fa_title        String            @unique(map: "role_UN1") @db.VarChar(30)
  owner           owner[]
  role_permission role_permission[]
}

model role_permission {
  role_id       Int
  permission_id Int
  permission    permission @relation(fields: [permission_id], references: [id], map: "role_permission_FK")
  role          role       @relation(fields: [role_id], references: [id], map: "role_permission_FK_1")

  @@id([role_id, permission_id])
  @@index([permission_id], map: "role_permission_FK")
}

model category_image {
  category_id Int      @id
  url         String   @db.VarChar(100)
  width       Int
  height      Int
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, map: "category_image_FK")
}

model residence_air_conditioning_attribute {
  residence_id    Int       @id
  radiator        Boolean?
  wood_heater     Boolean?
  fireplace       Boolean?
  korsi           Boolean?
  oil_heater      Boolean?
  fancoil         Boolean?
  electric_heater Boolean?
  air_conditioner Boolean?
  water_cooler    Boolean?
  split           Boolean?
  ceiling_fan     Boolean?
  standing_fan    Boolean?
  residence       residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "NewTable_FK")
}

model residence_cooking_attribute {
  residence_id Int       @id
  fridge       Boolean?
  microwave    Boolean?
  pan          Boolean?
  pot          Boolean?
  grill        Boolean?
  skewer       Boolean?
  oven         Boolean?
  lighter      Boolean?
  residence    residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_cooking_attribute_FK")
}

model residence_entertainment_attribute {
  residence_id Int       @id
  television   Boolean?
  receiver     Boolean?
  audio_system Boolean?
  swing        Boolean?
  ping_pong    Boolean?
  foosball     Boolean?
  game_console Boolean?
  pool_table   Boolean?
  game_board   Boolean?
  treadmill    Boolean?
  bicycle      Boolean?
  beach_motor  Boolean?
  residence    residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_entertainment_attribute_FK")
}

model residence_facility_attribute {
  residence_id        Int       @id
  furniture           Boolean?
  vacuum_cleaner      Boolean?
  washing_machine     Boolean?
  washing_powder      Boolean?
  dishwashing_machine Boolean?
  wifi                Boolean?
  hairdryer           Boolean?
  elevator            Boolean?
  iron                Boolean?
  telephone           Boolean?
  first_aid_kit       Boolean?
  security_camera     Boolean?
  residence           residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_facility_attribute_FK")
}

model residence_parking_attribute {
  residence_id Int       @id
  roof         Boolean?
  unroofed     Boolean?
  public       Boolean?
  free_space   Boolean?
  capacity     Int       @default(0)
  residence    residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_parking_attribute_FK")
}

model residence_price {
  residence_id        Int       @id
  weekday_price       Int       @default(0)
  weekend_price       Int       @default(0)
  peak_price          Int       @default(0)
  extra_guest_weekday Int       @default(0)
  extra_guest_weekend Int       @default(0)
  extra_guest_peak    Int       @default(0)
  residence           residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_price_FK")
}

model residence_room_attribute {
  residence_id   Int       @id
  count          Int       @default(0)
  wall_closet    Boolean?
  drawer         Boolean?
  hanger         Boolean?
  double_bed     Boolean?
  single_bed     Boolean?
  carpet         Boolean?
  heating_system Boolean?
  cooling_system Boolean?
  residence      residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_room_attribute_FK")
}

model residence_serve_attribute {
  residence_id Int       @id
  plate        Boolean?
  fork_spoon   Boolean?
  knife        Boolean?
  bowl         Boolean?
  glass        Boolean?
  teapot       Boolean?
  kettle       Boolean?
  samovar      Boolean?
  tea_maker    Boolean?
  salt_shaker  Boolean?
  tablecloth   Boolean?
  dining_table Boolean?
  child_chair  Boolean?
  tissue_paper Boolean?
  residence    residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_serve_attribute_FK")
}

model residence_wc_bathroom {
  residence_id       Int       @id
  location           String    @db.VarChar(100)
  local_wc           Boolean?
  fix_wc             Boolean?
  portable_wc        Boolean?
  shower             Boolean?
  jacuzzi            Boolean?
  bathtub            Boolean?
  soap               Boolean?
  shampoo            Boolean?
  shared_wc_bathroom Boolean   @default(false)
  residence          residence @relation(fields: [residence_id], references: [id], onDelete: Cascade, map: "residence_wc_bathroom_FK")
}

enum faq_faq_type {
  residence
  quest
  general
}

enum residence_rule_pet_status {
  yes
  yes_outside
  yes_in_box
  no
}

enum residence_rule_ceremonies {
  yes
  yes_by_coordination
  no
}
